
app:	file format elf32-littlearm

Disassembly of section .text:

<main>:
               	trap
               	trap

<Reset>:
               	push	{r7, lr}
               	mov	r7, sp
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r1, r1, r0
               	bl	0x92 <__aeabi_memclr>   @ imm = #0x34
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r2, r1, r0
               	movw	r1, #0x280
               	movt	r1, #0x0
               	bl	0x84 <__aeabi_memcpy>   @ imm = #0x8
               	bl	0x40 <main>             @ imm = #-0x40
               	trap

<UsageFault>:
               	b	0x82 <UsageFault>       @ imm = #-0x4

<__aeabi_memcpy>:
               	b.w	0x98 <memcpy>           @ imm = #0x10

<__aeabi_memset>:
               	mov	r3, r1
               	mov	r1, r2
               	mov	r2, r3
               	b.w	0x1e4 <memset>          @ imm = #0x152

<__aeabi_memclr>:
               	movs	r2, #0x0
               	b.w	0x88 <__aeabi_memset>   @ imm = #-0x10

<memcpy>:
               	push	{r4, r5, r6, r7, lr}
               	add	r7, sp, #0xc
               	push.w	{r8, r9, r10}
               	cmp	r2, #0xf
               	bls	0x16c <memcpy+0xd4>     @ imm = #0xc6
               	rsbs	r3, r0, #0
               	ands	r4, r3, #0x3
               	add.w	r12, r0, r4
               	beq	0xde <memcpy+0x46>      @ imm = #0x2c
               	mov	r3, r0
               	mov	r6, r1
               	ldrb	r5, [r6]
               	strb	r5, [r3], #1
               	cmp	r3, r12
               	itttt	lo
               	ldrblo	r5, [r6, #0x1]
               	strblo	r5, [r3], #1
               	cmplo	r3, r12
               	ldrblo	r5, [r6, #0x2]
               	itt	lo
               	strblo	r5, [r3], #1
               	cmplo	r3, r12
               	bhs	0xde <memcpy+0x46>      @ imm = #0xa
               	ldrb	r5, [r6, #0x3]
               	adds	r6, #0x4
               	strb	r5, [r3], #1
               	cmp	r3, r12
               	blo	0xb4 <memcpy+0x1c>      @ imm = #-0x2c
               	sub.w	lr, r2, r4
               	add.w	r9, r1, r4
               	bic	r8, lr, #0x3
               	add.w	r3, r12, r8
               	lsls.w	r2, r9, #0x1e
               	beq	0x174 <memcpy+0xdc>     @ imm = #0x7e
               	cmp.w	r8, #0x1
               	blt	0x1a6 <memcpy+0x10e>    @ imm = #0xaa
               	movs	r2, #0x18
               	and.w	r10, r2, r9, lsl #3
               	movs	r2, #0x0
               	sub.w	r2, r2, r9, lsl #3
               	and	r5, r2, #0x18
               	bic	r2, r9, #0x3
               	add.w	r6, r2, #0x8
               	ldr	r2, [r2]
               	lsr.w	r1, r2, r10
               	ldr	r2, [r6, #-4]
               	lsl.w	r4, r2, r5
               	orrs	r1, r4
               	str	r1, [r12], #4
               	cmp	r12, r3
               	bhs	0x1a6 <memcpy+0x10e>    @ imm = #0x7a
               	lsr.w	r1, r2, r10
               	ldr	r2, [r6]
               	lsl.w	r4, r2, r5
               	orrs	r1, r4
               	str	r1, [r12], #4
               	cmp	r12, r3
               	itttt	lo
               	lsrlo.w	r1, r2, r10
               	ldrlo	r2, [r6, #0x4]
               	lsllo.w	r4, r2, r5
               	orrlo	r1, r4
               	itt	lo
               	strlo	r1, [r12], #4
               	cmplo	r12, r3
               	bhs	0x1a6 <memcpy+0x10e>    @ imm = #0x50
               	lsr.w	r1, r2, r10
               	ldr	r2, [r6, #0x8]
               	adds	r6, #0x10
               	lsl.w	r4, r2, r5
               	orrs	r1, r4
               	str	r1, [r12], #4
               	cmp	r12, r3
               	blo	0x114 <memcpy+0x7c>     @ imm = #-0x58
               	b	0x1a6 <memcpy+0x10e>    @ imm = #0x38
               	mov	r3, r0
               	cmp	r2, #0x1
               	bge	0x1b2 <memcpy+0x11a>    @ imm = #0x3e
               	b	0x1de <memcpy+0x146>    @ imm = #0x68
               	cmp.w	r8, #0x1
               	blt	0x1a6 <memcpy+0x10e>    @ imm = #0x2a
               	mov	r4, r9
               	ldr	r1, [r4]
               	str	r1, [r12], #4
               	cmp	r12, r3
               	itttt	lo
               	ldrlo	r1, [r4, #0x4]
               	strlo	r1, [r12], #4
               	cmplo	r12, r3
               	ldrlo	r1, [r4, #0x8]
               	itt	lo
               	strlo	r1, [r12], #4
               	cmplo	r12, r3
               	bhs	0x1a6 <memcpy+0x10e>    @ imm = #0xa
               	ldr	r1, [r4, #0xc]
               	adds	r4, #0x10
               	str	r1, [r12], #4
               	cmp	r12, r3
               	blo	0x17c <memcpy+0xe4>     @ imm = #-0x2c
               	add.w	r1, r9, r8
               	and	r2, lr, #0x3
               	cmp	r2, #0x1
               	blt	0x1de <memcpy+0x146>    @ imm = #0x2a
               	add	r2, r3
               	ldrb	r6, [r1]
               	strb	r6, [r3], #1
               	cmp	r3, r2
               	itttt	lo
               	ldrblo	r6, [r1, #0x1]
               	strblo	r6, [r3], #1
               	cmplo	r3, r2
               	ldrblo	r6, [r1, #0x2]
               	itt	lo
               	strblo	r6, [r3], #1
               	cmplo	r3, r2
               	bhs	0x1de <memcpy+0x146>    @ imm = #0xa
               	ldrb	r6, [r1, #0x3]
               	adds	r1, #0x4
               	strb	r6, [r3], #1
               	cmp	r3, r2
               	blo	0x1b4 <memcpy+0x11c>    @ imm = #-0x2c
               	pop.w	{r8, r9, r10}
               	pop	{r4, r5, r6, r7, pc}

<memset>:
               	push	{r4, r6, r7, lr}
               	add	r7, sp, #0x8
               	cmp	r2, #0xf
               	bls	0x258 <memset+0x74>     @ imm = #0x6a
               	rsbs	r3, r0, #0
               	ands	lr, r3, #0x3
               	add.w	r12, r0, lr
               	beq	0x218 <memset+0x34>     @ imm = #0x1e
               	mov	r3, r0
               	strb	r1, [r3], #1
               	cmp	r3, r12
               	itttt	lo
               	strblo	r1, [r3], #1
               	cmplo	r3, r12
               	strblo	r1, [r3], #1
               	cmplo	r3, r12
               	bhs	0x218 <memset+0x34>     @ imm = #0x6
               	strb	r1, [r3], #1
               	cmp	r3, r12
               	blo	0x1fa <memset+0x16>     @ imm = #-0x20
               	sub.w	lr, r2, lr
               	bic	r2, lr, #0x3
               	add.w	r3, r12, r2
               	cmp	r2, #0x1
               	blt	0x24e <memset+0x6a>     @ imm = #0x24
               	uxtb	r2, r1
               	mov.w	r4, #0x1010101
               	muls	r2, r4, r2
               	str	r2, [r12], #4
               	cmp	r12, r3
               	itttt	lo
               	strlo	r2, [r12], #4
               	cmplo	r12, r3
               	strlo	r2, [r12], #4
               	cmplo	r12, r3
               	bhs	0x24e <memset+0x6a>     @ imm = #0x6
               	str	r2, [r12], #4
               	cmp	r12, r3
               	blo	0x230 <memset+0x4c>     @ imm = #-0x20
               	and	r2, lr, #0x3
               	cmp	r2, #0x1
               	bge	0x25e <memset+0x7a>     @ imm = #0x6
               	b	0x27e <memset+0x9a>     @ imm = #0x24
               	mov	r3, r0
               	cmp	r2, #0x1
               	blt	0x27e <memset+0x9a>     @ imm = #0x1e
               	add	r2, r3
               	strb	r1, [r3], #1
               	cmp	r3, r2
               	itttt	lo
               	strblo	r1, [r3], #1
               	cmplo	r3, r2
               	strblo	r1, [r3], #1
               	cmplo	r3, r2
               	bhs	0x27e <memset+0x9a>     @ imm = #0x6
               	strb	r1, [r3], #1
               	cmp	r3, r2
               	blo	0x260 <memset+0x7c>     @ imm = #-0x20
               	pop	{r4, r6, r7, pc}
