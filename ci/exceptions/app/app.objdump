
app:	file format elf32-littlearm


Disassembly of section .text:

<main>:
               	trap
               	trap

<Reset>:
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r1, r1, r0
               	bl	#0xe2
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r2, r1, r0
               	movw	r1, #0x142
               	movt	r1, #0x0
               	bl	#0x8
               	bl	#-0x3c
               	trap

DefaultExceptionHandler:
               	b	#-0x4 <DefaultExceptionHandler>

UsageFault:
               	blo.w	#0x2756a <_sidata+0x274ab>

__aeabi_memcpy:
               	push	{r4, r5, r6, r7, lr}
               	cbz	r2, #0x60
               	subs	r3, r2, #0x1
               	and	r12, r2, #0x3
               	cmp	r3, #0x3
               	bhs	#0x8 <__aeabi_memcpy+0x18>
               	movs	r2, #0x0
               	cmp.w	r12, #0x0
               	bne	#0x32 <__aeabi_memcpy+0x4a>
               	b	#0x4c <__aeabi_memcpy+0x66>
               	sub.w	lr, r12, r2
               	adds	r3, r1, #0x1
               	adds	r4, r0, #0x1
               	mvn	r2, #0x3
               	adds	r6, r3, r2
               	adds	r5, r4, r2
               	adds	r2, #0x4
               	ldrb	r7, [r6, #0x3]
               	strb	r7, [r5, #0x3]
               	ldrb	r7, [r6, #0x4]
               	strb	r7, [r5, #0x4]
               	ldrb	r7, [r6, #0x5]
               	strb	r7, [r5, #0x5]
               	ldrb	r6, [r6, #0x6]
               	strb	r6, [r5, #0x6]
               	add.w	r5, lr, r2
               	adds	r5, #0x4
               	bne	#-0x20 <__aeabi_memcpy+0x24>
               	adds	r2, #0x4
               	cmp.w	r12, #0x0
               	beq	#0x1a <__aeabi_memcpy+0x66>
               	ldrb	r3, [r1, r2]
               	cmp.w	r12, #0x1
               	strb	r3, [r0, r2]
               	beq	#0x10 <__aeabi_memcpy+0x66>
               	adds	r3, r2, #0x1
               	cmp.w	r12, #0x2
               	ldrb	r7, [r1, r3]
               	strb	r7, [r0, r3]
               	beq	#0x4 <__aeabi_memcpy+0x66>
               	adds	r2, #0x2
               	ldrb	r1, [r1, r2]
               	strb	r1, [r0, r2]
               	pop	{r4, r5, r6, r7, pc}

__aeabi_memset:
               	push	{r4, lr}
               	cmp	r1, #0x0
               	it	eq
               	popeq	{r4, pc}
               	subs	r3, r1, #0x1
               	and	r12, r1, #0x3
               	cmp	r3, #0x3
               	bhs	#0x2 <__aeabi_memset+0x16>
               	movs	r1, #0x0
               	b	#0x1e <__aeabi_memset+0x36>
               	sub.w	lr, r12, r1
               	adds	r1, r0, #0x1
               	mvn	r3, #0x3
               	adds	r4, r1, r3
               	adds	r3, #0x4
               	strb	r2, [r4, #0x6]
               	strb	r2, [r4, #0x5]
               	strb	r2, [r4, #0x4]
               	strb	r2, [r4, #0x3]
               	add.w	r4, lr, r3
               	adds	r4, #0x4
               	bne	#-0x16 <__aeabi_memset+0x20>
               	adds	r1, r3, #0x4
               	cmp.w	r12, #0x0
               	itt	ne
               	strbne	r2, [r0, r1]
               	cmpne.w	r12, #0x1
               	bne	#0x0 <__aeabi_memset+0x46>
               	pop	{r4, pc}
               	add	r0, r1
               	cmp.w	r12, #0x2
               	strb	r2, [r0, #0x1]
               	it	ne
               	strbne	r2, [r0, #0x2]
               	pop	{r4, pc}

__aeabi_memclr:
               	movs	r2, #0x0
               	b.w	#-0x5a <__aeabi_memset>
