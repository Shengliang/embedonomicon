
app:	file format elf32-littlearm


Disassembly of section .text:

<main>:
               	trap
               	trap

<Reset>:
               	push	{r7, lr}
               	mov	r7, sp
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r1, r1, r0
               	bl	#0x34
               	movw	r1, #0x0
               	movw	r0, #0x0
               	movt	r1, #0x2000
               	movt	r0, #0x2000
               	subs	r2, r1, r0
               	movw	r1, #0x16c
               	movt	r1, #0x0
               	bl	#0x8
               	bl	#-0x40
               	trap

<UsageFault>:
               	b	#-0x4 <UsageFault>

<__aeabi_memcpy>:
               	b.w	#0x10 <memcpy>

<__aeabi_memset>:
               	mov	r3, r1
               	mov	r1, r2
               	mov	r2, r3
               	b.w	#0x84 <memset>

<__aeabi_memclr>:
               	movs	r2, #0x0
               	b.w	#-0x10 <__aeabi_memset>

<memcpy>:
               	push	{r4, r5, r6, r7, lr}
               	add	r7, sp, #0xc
               	str	r8, [sp, #-4]!
               	cbz	r2, #0x10
               	subs	r3, r2, #0x1
               	and	r12, r2, #0x3
               	cmp	r3, #0x3
               	bhs	#0xc <memcpy+0x22>
               	movs	r2, #0x0
               	cmp.w	r12, #0x0
               	bne	#0x3e <memcpy+0x5c>
               	ldr	r8, [sp], #4
               	pop	{r4, r5, r6, r7, pc}
               	bic	r2, r2, #0x3
               	add.w	lr, r0, #0x1
               	rsbs	r4, r2, #0
               	add.w	r8, r1, #0x1
               	mvn	r2, #0x3
               	add.w	r6, r8, r2
               	add.w	r5, lr, r2
               	adds	r2, #0x4
               	ldrb	r3, [r6, #0x3]
               	strb	r3, [r5, #0x3]
               	ldrb	r3, [r6, #0x4]
               	strb	r3, [r5, #0x4]
               	ldrb	r3, [r6, #0x5]
               	strb	r3, [r5, #0x5]
               	ldrb	r3, [r6, #0x6]
               	strb	r3, [r5, #0x6]
               	adds	r3, r4, r2
               	adds	r3, #0x4
               	bne	#-0x22 <memcpy+0x34>
               	adds	r2, #0x4
               	cmp.w	r12, #0x0
               	beq	#-0x42 <memcpy+0x1c>
               	ldrb	r3, [r1, r2]
               	cmp.w	r12, #0x1
               	strb	r3, [r0, r2]
               	beq	#-0x4c <memcpy+0x1c>
               	adds	r3, r2, #0x1
               	cmp.w	r12, #0x2
               	ldrb	r6, [r1, r3]
               	strb	r6, [r0, r3]
               	beq	#-0x58 <memcpy+0x1c>
               	adds	r2, #0x2
               	ldrb	r1, [r1, r2]
               	strb	r1, [r0, r2]
               	ldr	r8, [sp], #4
               	pop	{r4, r5, r6, r7, pc}

<memset>:
               	push	{r4, r6, r7, lr}
               	add	r7, sp, #0x8
               	cbz	r2, #0x3e
               	subs	r3, r2, #0x1
               	and	r12, r2, #0x3
               	cmp	r3, #0x3
               	bhs	#0x2 <memset+0x14>
               	movs	r2, #0x0
               	b	#0x22 <memset+0x38>
               	bic	r2, r2, #0x3
               	add.w	lr, r0, #0x1
               	rsbs	r3, r2, #0
               	mvn	r2, #0x3
               	add.w	r4, lr, r2
               	adds	r2, #0x4
               	strb	r1, [r4, #0x6]
               	strb	r1, [r4, #0x5]
               	strb	r1, [r4, #0x4]
               	strb	r1, [r4, #0x3]
               	adds	r4, r3, r2
               	adds	r4, #0x4
               	bne	#-0x16 <memset+0x22>
               	adds	r2, #0x4
               	cmp.w	r12, #0x0
               	itt	ne
               	strbne	r1, [r0, r2]
               	cmpne.w	r12, #0x1
               	bne	#0x0 <memset+0x48>
               	pop	{r4, r6, r7, pc}
               	add	r2, r0
               	cmp.w	r12, #0x2
               	strb	r1, [r2, #0x1]
               	it	ne
               	strbne	r1, [r2, #0x2]
               	pop	{r4, r6, r7, pc}
